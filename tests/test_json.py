from jscc.testing.checks import get_empty_files, get_misindented_files, get_invalid_json_files
from jscc.testing.util import warn_and_assert
from jscc.testing.filesystem import walk_json_data
from jscc.schema import is_json_schema
from jscc.testing.checks import validate_items_type, validate_letter_case, validate_schema
from jscc.testing.util import http_get
import pytest


def test_empty():
    warn_and_assert(get_empty_files(), "{0} is empty, run: rm {0}", "Files are empty. See warnings below.")


def test_indent():
    warn_and_assert(
        get_misindented_files(),
        "{0} is not indented as expected",
        "Files are not indented as expected. See warnings below",
    )


def test_invalid_json():
    warn_and_assert(
        get_invalid_json_files(), "{0} is not valid JSON: {1}", "JSON files are invalid. See warnings below."
    )


schemas = [(path, name, data) for path, name, _, data in walk_json_data() if is_json_schema(data)]
metaschema = http_get("https://standard.open-contracting.org/schema/1__1__4/meta-schema.json").json()

metaschema["properties"]["version"] = {
    "type": "string",
}
metaschema["properties"]["propertyOrder"] = {
    "type": "integer",
}


@pytest.mark.parametrize("path,name,data", schemas)
def test_schema_valid(path, name, data):

    # skip schemas generated by tests for now
    if "schema/testing" in path:
        return
    validate_json_schema(path, name, data, metaschema)


def validate_json_schema(path, name, data, schema):
    errors = 0
    errors += validate_schema(path, data, schema)
    errors += validate_items_type(path, data)
    errors += validate_letter_case(path, data)
    assert not errors, "One or more JSON Schema files are invalid. See warnings below."
